[core]
	editor = subl -w
	ignorecase = false
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	trustctime = false
	autocrlf = input

[color]
	ui = auto
	[color "branch"]
		current = yellow reverse
		local = yellow
		remote = green
	[color "diff"]
		meta = yellow bold
		frag = magenta bold
		old = red bold
		new = green bold
		whitespace = red reverse
	[color "status"]
		added = yellow
		changed = green
		untracked = cyan

[branch]
	autosetupmerge = true

[push]
	default = tracking

[http]
	postBuffer = 524288000

[alias]
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	l2 = log --pretty=oneline --graph --abbrev-commit
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	d2 = "diff -R"
	p = !"git pull; git submodule foreach git pull origin master"
	c = clone --recursive
	ca = !git add -A && git commit -av
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	fb = "!f() { git branch -a --contains $1; }; f"
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d" # delete all merged branches

	tags = tag -l
	amend = commit --amend --reuse-message=HEAD
	branches = branch -a
	remotes = remote -v
	contributors = shortlog --summary --numbered

	lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lga = log --stat --abbrev-commit
	lg = !"git lg1"
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

	ign = ls-files -o -i --exclude-standard # Show Ignored files present in repo

	dw = diff --word-diff
	dt = difftool
	s = status -sb
	pullall = "!f() { for remote in `git branch -r | grep -v master `; do git checkout --track $remote ; done }; f"
	lsch = "!f() { git diff --name-status -r "HEAD~$1"; }; f"

[apply]
	whitespace = fix

[init]
	templatedir = ~/.git_template

[merge]
	log = true
	tool = meld
	conflictstyle = diff3

[mergetool]
	cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE $MERGED
	trustExitCode = false
	keepBackup = false
	prompt = false

[diff]
	renames = copies
	tool = meld

[difftool]
	promt = false

[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
